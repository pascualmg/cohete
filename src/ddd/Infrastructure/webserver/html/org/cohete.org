#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="spacemacs.css">

#+TITLE: Descubriendo el Desarrollo Web Asíncrono en PHP: Una Aventura de Aprendizaje 🚀

* El Comienzo de la Aventura

Como desarrollador PHP, siempre estoy buscando  o aprendiendo cosas que me parecen interesantes. A lo largo de mi carrera, a menudo me he sentido frustrado por la complejidad innecesaria de muchos frameworks, deseando encontrar una manera de enfocarme en resolver problemas reales, en lugar de luchar contra las herramientas.

Mi curiosidad se avivó aún más con la reciente actualización del framework Symfony, que introdujo la posibilidad de cambiar los "runtimes", permitiendo opciones como la ejecución asíncrona. Esto me impulsó a investigar más a fondo.

* Descubriendo RxPHP y la Programación Reactiva

En un momento de mi carrera me vi metido en el desarrollo de un front , para el cual el gran Guillermo Cuenca me introdujo en el mundo de la programación reactiva con JS y descubrí su potencial.
 Tras pasar un tiempo me topé con los videos de [[https://www.youtube.com/watch?v=mJFbYHYxSDg][Sergey Zhuk]] sobre RxPHP y la programación reactiva. Estos conceptos me fascinaron y comencé a explorar más a fondo.
Recursos como [[https://rxmarbles.com/][RxMarbles]] y [[https://reactivex.io/learnrx/][LearnRx]] me ayudaron a comprender mejor los principios de la programación reactiva y cómo podría aplicarlos en PHP.
 Sería posible aplicar estos conceptos en PHP? Me pregunté.


Vi el potencial de crear aplicaciones web altamente eficientes y receptivas aprovechando la naturaleza asíncrona de PHP. Sin embargo, noté que no había muchas opciones para comenzar fácilmente con estas tecnologías en PHP sin tener que configurar todo desde cero.

* Creando una Solución

Inspirado por este desafío, decidí crear [[https://github.com/pascualmg/cohete][un microframework]] que combinara la programación asíncrona con el Diseño Guiado por el Dominio para Desarrolladores (DDDD).
Aunque esta última parte , es meramente organizativa y nada tiene que ver con el core , que está totalmente separado.

Mi objetivo era proporcionar una manera fácil para que los programadores de backend en PHP pudieran comenzar a utilizar estas tecnologías sin tener que preocuparse por la configuración inicial.

Una de las grandes ventajas de este microframework es que el código del núcleo es super sencillo. Esto te da un control casi total sobre el código de tu framework y facilita su comprensión y extensión.

Además, es poco opinionado y se puede ampliar fácilmente según tus necesidades. Incluso puedes construir tu propio kernel desde cero si lo deseas fácilmente.

* Un Vistazo al Código

Veamos un ejemplo práctico. Imaginemos que queremos crear un endpoint para publicar un nuevo post en un blog.

Primero, definimos la ruta en nuestro archivo de configuración:

#+BEGIN_SRC json
[
  {
    "method": "POST",
    "path": "/post",
    "handler": "\\CreatePostController"
  }
]
#+END_SRC

Luego, implementamos el =CreatePostController=:

#+BEGIN_SRC php
class CreatePostController implements HttpRequestHandler
{
    public function __invoke(ServerRequestInterface $request): PromiseInterface
    {
        $payload = json_decode($request->getBody()->getContents(), true);

        $post = new Post(
            Uuid::from($payload['id']),
            $payload['title'],
            $payload['content']
        );

        return $this->postRepository->save($post)->then(
            fn() => JsonResponse::created(),
            fn(Exception $e) => JsonResponse::withError($e)
        );
    }
}
#+END_SRC

Aquí es donde brilla la magia de ReactPHP. El método =save= del repositorio devuelve una =Promise=. Si el post se guarda con éxito, la promesa se resuelve, y si algo sale mal, se rechaza.

Lo fascinante es que, mientras se resuelve la promesa, el servidor puede continuar procesando otras solicitudes de manera concurrente. De hecho, en pruebas en producción, este microframework ha podido manejar fácilmente registros de 40k mientras atiende otras peticiones simultáneamente. Este es el poder de la programación asíncrona en acción.

* Te apetece probarlo?

Animo a todos los backend de PHP a probar esta nueva tecnología y experimentar los beneficios de la programación asíncrona.

Puedes explorar el código fuente en  [[https://github.com/pascualmg/cohete][GitHub]]
y conocer más sobre mi trabajo en [[https://pascualmg.dev]] , servidor donde se ha puesto en producción este framework para pruebas reales y donde estoy creando un pequeño Portfolio además de ser también mi laboratorio de pruebas :)

#PHP #AsyncPHP #Microframework #DDD #DesarrolloWeb #OpenSource #ReactPHP #RxPHP #ReactiveProgramming