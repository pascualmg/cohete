Claro, aquí te dejo el post completo en formato de texto plano con la sintaxis de .org. Recuerda copiar todo el contenido, incluyendo las líneas de código, y pegarlo en tu editor favorito:

```
#+TITLE: El tema del tema: KISS con Web Components
#+AUTHOR: Pascual M.G.
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="spacemacs.css">


¡Hola! ¿Alguna vez os habéis encontrado luchando con la gestión de temas de colores en vuestros proyectos web?  Este quebradero de cabeza es tan común como frustrante. 
Durante el desarrollo de mi Portfolio que he decido craftear desde cero, desde el back hasta el front, todo , vi que de alguna forma tendría que dar a esto solución y esto es lo que se me ha ocurrido,  aunque simple, es sorprendentemente efectiva. Si estáis pensando que hace un back y no un front, es cierto, pero me gusta explorar tecnologías , sean del sitio que sean si son la ?? como creo que son los Web Components, me gusta investigar y aprender.
Creo este post por que me ha parecido interesante compartirlo, y si a alguien le sirve de ayuda, pues mejor que mejor.

** El problema: Cuando los colores se vuelven un caos

Imaginad que estáis construyendo una aplicación web compleja. Tenéis decenas, quizás cientos de componentes. Botones, formularios, paneles, modales... y todos necesitan seguir un esquema de colores coherente. Ahora, añadid a eso la necesidad de tener múltiples temas (modo claro, modo oscuro, ¡tal vez incluso un modo "Con tus colores del IDE " o "Pepa PIG"! quien sabe). De repente, lo que parecía un simple juego de colores se convierte en un problema logístico de proporciones épicas.

Tradicionalmente, muchos desarrolladores han recurrido a soluciones como:

1. Clases CSS gigantes que definen cada color para cada elemento.
2. Preprocesadores CSS con variables que se compilan en diferentes hojas de estilo.
3. Bibliotecas de JavaScript que manipulan dinámicamente los estilos.

Pero cada una de estas soluciones tiene sus propios problemas. Las clases CSS se vuelven inmanejables, los preprocesadores requieren una compilación adicional, y las bibliotecas de JavaScript pueden ser pesadas y afectar el rendimiento.

** La solución: Simpleza y elegancia con Web Components

Entonces, ¿qué hacemos? Bueno, en mi caso, como estoy usando Web Components personalizados (porque soy mas bien de backend y me gusta explorar tecnologías del front ), se me ocurrió una idea: ¿Y si usamos las propias capacidades del navegador para manejar nuestros temas? 

Así nació mi solución, que se basa en tres principios simples:

1. Un componente "core" que define todas las variables de color.
2. Variables CSS a nivel :root que todos los componentes pueden usar.
3. Componentes individuales que son "agnósticos" respecto al color real que están usando.

Suena simple, ¿verdad? Pero como dicen, la belleza está en la simplicidad. Veamos cómo funciona esto en la práctica.

*** El componente "core": ThemeSwitcher

Este es el corazón de nuestra solución. Es un Web Component que se encarga de definir y aplicar nuestro tema de colores. Aquí tenéis un vistazo rápido a cómo podría verse:

#+BEGIN_SRC javascript
class ThemeSwitcher extends HTMLElement {
    constructor() {
        super();
        this.themes = {
            'light': {
                '--primary-color': '#4a90e2',
                '--background-color': '#f4f4f4',  
                // ... más colores ...
            },
            'dark': {
                '--primary-color': '#bb86fc',
                '--background-color': '#121212',
                // ... más colores ...  
            }
        };
    }

    connectedCallback() {
        this.applyTheme('light'); // Tema por defecto  
    }

    applyTheme(themeName) {
        const theme = this.themes[themeName];
        Object.entries(theme).forEach(([property, value]) => {
            document.documentElement.style.setProperty(property, value);
        });
    }
}

customElements.define('theme-switcher', ThemeSwitcher);
#+END_SRC

Este componente hace algo muy simple pero poderoso: define nuestros temas como objetos JavaScript y luego aplica esos temas estableciendo variables CSS en el elemento raíz del documento.

*** Los componentes "agnósticos": Usando las variables de color

Ahora, ¿cómo usan nuestros otros componentes estos colores? Fácil, simplemente hacen referencia a las variables CSS. Por ejemplo, un componente de botón podría verse así:

#+BEGIN_SRC javascript
class MyButton extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({mode: 'open'});
        this.shadowRoot.innerHTML = `
            <style>
                button {
                    background-color: var(--primary-color);
                    color: var(--text-color);
                    border: none;
                    padding: 10px 20px;
                    cursor: pointer;
                }
            </style>
            <button><slot></slot></button>
        `;
    }
}

customElements.define('my-button', MyButton);
#+END_SRC

¿Veis cómo el botón no sabe realmente qué color es "--primary-color"? Solo sabe que debe usarlo para su fondo. Esto es lo que quiero decir con "agnóstico de color".

Por el momento nada mas que colores , pero se puede extender a tipografía, espaciado, etc.

Si estas pensando que eso hace dependiente al componente de las variables globales... tienes razón, pero es un compromiso que estoy dispuesto a aceptar por la simplicidad y eficiencia que ofrece. 
Y si quieres que el componente sea agnóstico de color, puedes pasarle las variables como propiedades.

Defines en el componente un atributo que se llama color y lo usas en el componente en lugar de las variables CSS. Es una de tantas posibilidades, pero aquí nos centraremos solo en la base de la solución.

*** Poniendo todo junto 

Ahora, en nuestro HTML, podríamos tener algo así:

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Mi Aplicación Temática</title>
    <script type="module" src="theme-switcher.js"></script>
    <script type="module" src="my-button.js"></script>
</head>
<body>
    <theme-switcher id="themeSwitcher"></theme-switcher>
    <my-button>¡Haz clic!</my-button>
    <script>
        const switcher = document.getElementById('themeSwitcher');
        // Cambiamos al tema oscuro
        switcher.applyTheme('dark');  
    </script>
</body>
</html>
#+END_SRC

Y toma! Tenemos una aplicación con temas cambiables, sin necesidad de CSS gigante, sin preprocesadores, y sin bibliotecas pesadas de JavaScript.

** Que ventajas tiene esta solución?

1. *Rendimiento*: Las variables CSS son rápidas. Muy rápidas. Cambiar el tema es prácticamente instantáneo.
2. *Mantenibilidad*: Todos los colores están definidos en un solo lugar. ¿Necesitas cambiar un color? Solo tienes que hacerlo una vez.
3. *Flexibilidad*: Añadir nuevos temas es tan simple como añadir un nuevo objeto al componente ThemeSwitcher.
4. *Compatibilidad*: Esto funciona con cualquier framework (o sin framework). Los Web Components son estándar web.
5. *Escalabilidad*: Ya tengas 10 o 1000 componentes, el sistema funciona igual de bien.

** Reflexiones finales: El poder de pensar diferente

Lo que me encanta de esta solución es cómo toma algo que tradicionalmente se ha visto como un problema de CSS y lo convierte en un problema de componentes. Es un cambio de perspectiva que abre nuevas posibilidades.

Y lo mejor es que esto es solo el principio. Podrías expandir este concepto para manejar no solo colores, sino también tipografía, espaciado, o incluso animaciones. El cielo es el límite cuando empiezas a pensar en términos de componentes y propiedades dinámicas.

Así que la próxima vez que os enfrentéis a un problema que parece complicado, esto me recuerda que a veces, la solución más elegante es también la más simple. Creo que debemos cuestionar las convenciones y buscar nuevas formas de abordar esos viejos problemas.

y ahora

** TODO Próximos pasos
- Implementar una interfaz de usuario para cambiar temas 
- Explorar cómo manejar preferencias de usuario (por ejemplo, guardar el tema preferido en localStorage) 
- Investigar cómo esta técnica podría aplicarse a otros aspectos del diseño, como la tipografía o el espaciado
- En el back Crear un controller especifico que use el wrapper PHP de pandoc para renderizar el contenido de los post en HTML , ya que se guardan en texto plano formato .org

¿Qué opináis de esta aproximación? ¿Habéis usado técnicas similares en vuestros proyectos? ¡Me encantaría escuchar vuestras experiencias dejadme un comentario !

**Actualizacion: Ya que estamos lo vamos a hacer.

Se me ha ocurrido usar y hacer un ThemeToggler en este mismo post que estas leyendo. Es ese boton que hay por ahi :D
Por supuesto se usa para todos los componentes de mi SPA. 

¡Y aquí es donde la magia realmente sucede! Después de todo nuestro trabajo en la plantilla y el diseño, hemos logrado algo verdaderamente emocionante: la integración perfecta de nuestro componente ThemeToggler en la plantilla generada por Pandoc.
Os voy a contar cómo llegamos aquí , si es que aún no lo has visto en la parte superior derecha de esta página.
Hasta ahora la plantilla de Pandoc tenia un tema "fijo" ahora eso ha cambiado, ahora el tema es dinámico y se puede cambiar en tiempo real.
Puedes verlo y probarlo en la parte superior derecha de esta página, y a partir de ahora en toda la SPA de este blog.

** ¿Cómo lo he integrado? 

1. *Creación del componente*: Primero, desarrollamos nuestro ThemeToggler como un Web Component independiente. Este componente encapsula toda la lógica para cambiar entre temas de color.
    [[https://github.com/pascualmg/cohete/blob/main/src/ddd/Infrastructure/webserver/html/js/atomic/organism/ThemeToogler.js][Código fuente del ThemeToggler]]

2. *Diseño de la plantilla*: Luego, diseñamos nuestra plantilla HTML para Pandoc, incluyendo un espacio para nuestro ThemeToggler en el header fijo. 

3. *Importación del componente*: En la plantilla, añadimos una línea para importar nuestro ThemeToggler:
   #+BEGIN_SRC html
   <script type="module" src="../../html/js/atomic/organism/ThemeToogler.js"></script>
   #+END_SRC

4. *Uso del componente*: Colocamos la etiqueta del componente en nuestra plantilla:
   #+BEGIN_SRC html 
   <theme-toggler></theme-toggler>
   #+END_SRC

5. *Generación del HTML*: Finalmente, usamos Pandoc para generar nuestro HTML final:
   #+BEGIN_SRC bash
   pandoc --template=/home/passh/src/php/cohete/src/ddd/Infrastructure/webserver/html/org/template.html --toc --toc-depth=2 eltemadeltema.org -o eltemadeltema.html
   #+END_SRC

** Aprovechando al máximo nuestro ThemeToogler 

En esta última actualización, quería remarcar un par de puntos sobre nuestro componente ThemeToogler:

1. *Flexibilidad en el diseño*: Aunque aquí hemos implementado el ThemeToogler como un simple botón, las posibilidades son infinitas. Podríamos hacerlo como un menú desplegable, un conjunto de botones de radio, o incluso un selector de colores completamente personalizable. La belleza de los Web Components es que encapsulan su funcionalidad, por lo que podemos cambiar su apariencia y comportamiento sin afectar al resto de nuestro código.

2. *Posibilidades de automatización*: Con un pequeño ajuste, podríamos hacer que nuestro ThemeToogler cambie automáticamente según diferentes criterios. Por ejemplo, podría cambiar a un tema oscuro durante las horas nocturnas, o podría detectar la preferencia de tema del sistema operativo del usuario y ajustarse en consecuencia. Todo esto se podría lograr sin cambiar ningún otro componente, gracias a la naturaleza modular de los Web Components.

3. *Integración inmediata*: Una de las mejores partes de todo esto es que, a partir de ahora, todos los nuevos componentes que cree para mi sitio web y mi portfolio heredarán automáticamente esta funcionalidad de cambio de tema. No necesitaré escribir ningún código adicional o hacer ninguna configuración especial. Simplemente funcionará, porque los colores se definen a nivel global y todos los componentes los respetan.

1. *Reutilización de código*: Estamos reutilizando nuestro ThemeToggler en múltiples páginas sin tener que copiar y pegar código.
2. *Encapsulación*: Toda la lógica del cambio de tema está contenida en el componente, manteniendo nuestra plantilla limpia y fácil de mantener.
3. *Nativo y ligero*: Al usar Web Components nativos, no dependemos de frameworks pesados. Esto hace que nuestras páginas sean más rápidas y eficientes.
4. *Compatibilidad*: Los Web Components son compatibles con la mayoría de los navegadores modernos, lo que significa que nuestro ThemeToggler funcionará en casi cualquier lugar.
5. *Flexibilidad*: Podemos fácilmente actualizar o modificar el ThemeToogler sin tener que tocar el resto de nuestra plantilla o contenido.

** Conclusión

Los Web Components ofrecen todas estas ventajas. Además, al ser una tecnología nativa del navegador, se alinean perfectamente con mi filosofía de mantener las cosas simples y eficientes en mis proyectos.

*** Jappy Coding 🚀 !!!
