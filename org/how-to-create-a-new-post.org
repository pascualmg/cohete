#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="spacemacs.css">

#+TITLE: How to create a post    .

* Define your router file in your .env

#+begin_src php
ROUTES_PATH=/Users/passh/src/php/reactor/src/ddd/Infrastructure/HttpServer/Router/routes.json

#+end_src

* Arrancamos el cohete.
- Entramos en el directorio del proyecto y ejecutamos
  #+begin_src bash
  nix develop
  #+end_src

  #+begin_quote
  Hay que tener en cuenta que nix debe estar instalado en el sistema , y las experimental features nix-command y flakes deben estar activas .
  #+end_quote

  Una vez dentro  de esta consola dispondremos de la version de php indicada con xdebug , ya que por defecto se arranca con estos módulos en la shell de desarrollo.

* Create a new entry for the new =Controller/HttpRequestHandler=

#+begin_src php
[
  {
    "method": "POST",
    "path": "/post",
    "handler": "\\pascualmg\\reactor\\ddd\\Infrastructure\\HttpServer\\RequestHandler\\CreatePostController"
  }
]
#+end_src php

* Create the =Controller=


Este seria el skel del que partir, no hace nada mas que responder con un 200 que no es poco 😅

#+begin_src php
<?php

namespace pascualmg\reactor\ddd\Infrastructure\HttpServer\RequestHandler;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use React\Http\Message\Response;
use React\Promise\PromiseInterface;

class CreatePostController implements HttpRequestHandler
{

    public function __invoke(ServerRequestInterface $request, ?array $routeParams): ResponseInterface|PromiseInterface //of a response Interface
    {
        return new Response();
    }
}

#+end_src

** Una "larga y necesaria aclaración" antes de seguir.

Todos los Condroladores , deben implementar =HttpRequestHandler= , no ha de verse como una restricción en absoluto, ya que reactPHP no impone aquí ninguna restricción se podria usar una lamda cualquiera, este tipado lo brinda el microFramework 🚀 , En este caso ese tipado es algo que nos brinda una clara visión de lo que puede o no hacer, y debe o no hacer , nuestro controlador.

En esa firma es donde se define, ahora en php8 posibles valores de retorno, esto que podría a priori parecer un smellcode si estamos con el chip funcional en mente,  por que así a simple vista logicamente no es una función pura, pero si lo pensamos bien , sería la manera sintáctica de tener un tipo polimórfico.

#+begin_quote
El comentario al final , indica que hay un lack en el lenguaje de php para representar ese concepto, esto también nos va a pasar en sitios como los respositorios, donde , yo puedo devolver una promise , que se resolverá en un array de post , y como programador lo debo de saber y respetar .

Lo importante es tenerlo claro , que si vas a devolver una promise, aka *deferred* o "en diferido ..." su _resolve_ *TIENE  QUE* devolver una =ResponseInterface= , este , es un punto clave a entender
ya que es como nuestro kernel espera que sea .
#+end_quote

* Extraemos el body

Ahora que ya tenemos el controller devolviendo un 200 , es la hora de ver como obtenemos el payload que nos viene en la request , en este caso va a ser como un JSON , que contendrá los parámetros necesarios para crear nuestra entidad ( y registro en la DDBB )

Para empezar y ver que todo va bien haremos primero un =EchoController= para ver que conseguimos el payload , mirando un poco de doc...
#+begin_src php
<?php

namespace pascualmg\reactor\ddd\Infrastructure\HttpServer\RequestHandler;

use pascualmg\reactor\ddd\Infrastructure\HttpServer\JsonResponse;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use React\Http\Message\Response;
use React\Promise\PromiseInterface;

class CreatePostController implements HttpRequestHandler
{

    public function __construct(
   //     private readonly PostCreator $postCreator
    )
    {
    }

    public function __invoke(ServerRequestInterface $request, ?array $routeParams): ResponseInterface|PromiseInterface
    {
        $body = $request->getBody()->getContents();
        try {
            $payload = json_decode($body, true, 512, JSON_THROW_ON_ERROR);
        } catch (\JsonException $e) {
            return JsonResponse::withError($e);
        }

        return new Response(
            200,
            ["Content-Type" => "application/json"],
            json_encode($payload)
        );
    }
}

#+end_src

 En la linea 96 ya tenemos la manera de obtener fácilmente el json que nos viene de la request , una vez la obtenemos por el momento simplemente la devolvemos tal cual nos llegue.


Lo más ortodoxo sería pues hacer un =CommandHandler= que llame a un _Domain Service_ y este que llamara al =PostRepository= y lanzara un =DomainEvent= que sería escuchado por los diferentes listeners, esto será la meta, pero por el monento nos centraremos en que funcione el =save= del repositorio.


 #+begin_src php

    public function save(Post $postToCreate): PromiseInterface
    {
        $insertPostQuery = "
INSERT INTO post
(id, headline, articleBody, image, author, datePublished) VALUES
(?,?,?,?,?,?)
";
        return $this->mysqlClient->query($insertPostQuery, [
            (string)$postToCreate->id,
            $postToCreate->headline,
            $postToCreate->articleBody,
            $postToCreate->image,
            $postToCreate->author,
            $postToCreate->datePublished->format('Y-m-d H:i:s')
        ])->then(
            function (MysqlResult $mysqlResult): bool {
                $affectedRows = $mysqlResult->affectedRows;
                return $affectedRows > 0;
            },
            function (\Exception $e) {
                //Si en vez the throw hacemos return, en vez de
                //irse al onRejected , se va al onFullFilled
                //ya  que de hacerlo se entiende que la estamos solucionando
                throw $e;
            }
        );

    }
 #+end_src

* Lo más interesante viene ahora ...
 En este snapshot del controller , no voy a extraer aun ninguna func , en si el código
 es bastante "normal" y me refiero a "síncrono" hasta que llega el return y es donde entra en escena la mágia de reactPHP.

 Sin duda esas 2 líneas son las que más llaman la atención a quien esté acostumbrado a frameworks no asíncronos

 #+begin_src php
<?php

namespace pascualmg\reactor\ddd\Infrastructure\HttpServer\RequestHandler;

use Fig\Http\Message\StatusCodeInterface;
use pascualmg\reactor\ddd\Domain\Entity\Post;
use pascualmg\reactor\ddd\Domain\Entity\PostRepository;
use pascualmg\reactor\ddd\Domain\ValueObject\Uuid;
use pascualmg\reactor\ddd\Infrastructure\HelperFunctions\ExceptionTo;
use pascualmg\reactor\ddd\Infrastructure\HttpServer\JsonResponse;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use React\Http\Message\Response;
use React\Promise\PromiseInterface;

class CreatePostController implements HttpRequestHandler
{
    public function __construct(
        private readonly PostRepository $postRepository
    ) {
    }

   public function __invoke(ServerRequestInterface $request, ?array $routeParams): ResponseInterface|PromiseInterface
    {
        $body = $request->getBody()->getContents();
        try {
            $payload = json_decode($body, true, 512, JSON_THROW_ON_ERROR);
        } catch (\JsonException $e) {
            return JsonResponse::withError($e);
        }
        $postToCreate = new Post(
            id: Uuid::from($payload['id']),
            headline: $payload['headline'],
            articleBody: $payload['articleBody'],
            image: $payload['image'],
            author: $payload['author'],
            datePublished: new \DateTimeImmutable($payload['datePublished']),
        );

        return $this->postRepository->save($postToCreate)->then(
            static fn (Bool $affectedRows) => JsonResponse::create(StatusCodeInterface::STATUS_CREATED, [$affectedRows]),
            static fn (\Exception $error) => JsonResponse::withError($error)
        );
    }

}

 #+end_src

 Aquí es donde cobra más sentido ese comentario que la función =save= del repositorio tiene.

 Si dentro de esa función, no lanzamos la excepción hacia afuera, iría al =onSuccess= ya que consideraría como manejada , y no es lo que queremos.

 Entiendo que, si quito el =onRejected=, se comportará exactamente igual.


#+begin_src bash :results output :exports both
curl --location --request POST 'http://localhost:8000/post' \
--header 'Content-Type: application/json' \
--data-raw '{
          "id": "0000ce1a-b329-3459-b82f-9efb54a69ef5",
          "headline": "Sample Headline",
          "articleBody": "Sample Article Body",

          "image": "image url",
          "author": "Author Name",
          "datePublished": "2023-04-13 18:31:30"
        }'
#+end_src

#+RESULTS:
