#+HTML_HEAD: <style>
#+HTML_HEAD: :root {
#+HTML_HEAD:   --act1: #222226;
#+HTML_HEAD:   --act2: #5d4d7a;
#+HTML_HEAD:   --base: #b2b2b2;
#+HTML_HEAD:   --base-dim: #686868;
#+HTML_HEAD:   --bg1: #292b2e;
#+HTML_HEAD:   --bg2: #212026;
#+HTML_HEAD:   --bg3: #100a14;
#+HTML_HEAD:   --bg4: #0a0814;
#+HTML_HEAD:   --bg-alt: #42444a;
#+HTML_HEAD:   --border: #5d4d7a;
#+HTML_HEAD:   --cblk: #cbc1d5;
#+HTML_HEAD:   --cblk-bg: #2f2b33;
#+HTML_HEAD:   --cblk-ln: #827591;
#+HTML_HEAD:   --cblk-ln-bg: #373040;
#+HTML_HEAD:   --cursor: #e3dedd;
#+HTML_HEAD:   --const: #a45bad;
#+HTML_HEAD:   --comment: #2aa1ae;
#+HTML_HEAD:   --comment-light: #2aa1ae;
#+HTML_HEAD:   --comment-bg: #292e34;
#+HTML_HEAD:   --comp: #c56ec3;
#+HTML_HEAD:   --err: #e0211d;
#+HTML_HEAD:   --func: #bc6ec5;
#+HTML_HEAD:   --head1: #4f97d7;
#+HTML_HEAD:   --head1-bg: #293239;
#+HTML_HEAD:   --head2: #2d9574;
#+HTML_HEAD:   --head2-bg: #293235;
#+HTML_HEAD:   --head3: #67b11d;
#+HTML_HEAD:   --head3-bg: #293235;
#+HTML_HEAD:   --head4: #b1951d;
#+HTML_HEAD:   --head4-bg: #32322c;
#+HTML_HEAD:   --highlight: #444155;
#+HTML_HEAD:   --highlight-dim: #3b314d;
#+HTML_HEAD:   --keyword: #4f97d7;
#+HTML_HEAD:   --lnum: #44505c;
#+HTML_HEAD:   --mat: #86dc2f;
#+HTML_HEAD:   --meta: #9f8766;
#+HTML_HEAD:   --str: #2d9574;
#+HTML_HEAD:   --suc: #86dc2f;
#+HTML_HEAD:   --ttip: #9a9aba;
#+HTML_HEAD:   --ttip-sl: #5e5079;
#+HTML_HEAD:   --ttip-bg: #34323e;
#+HTML_HEAD:   --type: #ce537a;
#+HTML_HEAD:   --var: #7590db;
#+HTML_HEAD:   --war: #dc752f;
#+HTML_HEAD:   --aqua: #2d9574;
#+HTML_HEAD:   --aqua-bg: #293235;
#+HTML_HEAD:   --green: #67b11d;
#+HTML_HEAD:   --green-bg: #293235;
#+HTML_HEAD:   --green-bg-s: #29422d;
#+HTML_HEAD:   --cyan: #28def0;
#+HTML_HEAD:   --red: #f2241f;
#+HTML_HEAD:   --red-bg: #3c2a2c;
#+HTML_HEAD:   --red-bg-s: #512e31;
#+HTML_HEAD:   --blue: #4f97d7;
#+HTML_HEAD:   --blue-bg: #293239;
#+HTML_HEAD:   --blue-bg-s: #2d4252;
#+HTML_HEAD:   --magenta: #a31db1;
#+HTML_HEAD:   --yellow: #b1951d;
#+HTML_HEAD:   --yellow-bg: #32322c;
#+HTML_HEAD: }
#+HTML_HEAD: </style>
#+HTML_HEAD: <style>
#+HTML_HEAD: /* Estilo para el texto del código embebido */
#+HTML_HEAD: pre {
#+HTML_HEAD:   background-color: var(--bg3); /* Cambia aquí si prefieres otro color de fondo */
#+HTML_HEAD:   color: var(--cblk);
#+HTML_HEAD: }
#+HTML_HEAD: </style>
#+HTML_HEAD: <style>
#+HTML_HEAD: /* Tema de Emacs dark */
#+HTML_HEAD: /* Estilos generales */
#+HTML_HEAD: body {
#+HTML_HEAD:   background-color: var(--bg1);
#+HTML_HEAD:   color: var(--base);
#+HTML_HEAD:   font-family: Arial, sans-serif;
#+HTML_HEAD: }
#+HTML_HEAD: a {
#+HTML_HEAD:   color: var(--blue);
#+HTML_HEAD:   text-decoration: none;
#+HTML_HEAD: }
#+HTML_HEAD: a:hover {
#+HTML_HEAD:   text-decoration: underline;
#+HTML_HEAD: }
#+HTML_HEAD: /* Encabezados */
#+HTML_HEAD: h1, h2, h3, h4, h5, h6 {
#+HTML_HEAD:   color: var(--head1);
#+HTML_HEAD:   font-weight: bold;
#+HTML_HEAD:   margin-top: 20px;
#+HTML_HEAD: }
#+HTML_HEAD: h1 {
#+HTML_HEAD:   background-color: var(--head1-bg);
#+HTML_HEAD:   padding: 10px;
#+HTML_HEAD:   border-radius: 5px;
#+HTML_HEAD: }
#+HTML_HEAD: h2 {
#+HTML_HEAD:   color: var(--head2);
#+HTML_HEAD:   background-color: var(--head2-bg);
#+HTML_HEAD:   padding: 8px;
#+HTML_HEAD:   border-radius: 4px;
#+HTML_HEAD: }
#+HTML_HEAD: h3 {
#+HTML_HEAD:   color: var(--head3);
#+HTML_HEAD:   background-color: var(--head3-bg);
#+HTML_HEAD:   padding: 6px;
#+HTML_HEAD:   border-radius: 3px;
#+HTML_HEAD: }
#+HTML_HEAD: h4 {
#+HTML_HEAD:   color: var(--head4);
#+HTML_HEAD:   background-color: var(--head4-bg);
#+HTML_HEAD:   padding: 4px;
#+HTML_HEAD:   border-radius: 2px;
#+HTML_HEAD: }
#+HTML_HEAD: /* Botones */
#+HTML_HEAD: .button {
#+HTML_HEAD:   background-color: var(--bg3);
#+HTML_HEAD:   color: var(--base);
#+HTML_HEAD:   padding: 8px 16px;
#+HTML_HEAD:   border: none;
#+HTML_HEAD:   border-radius: 4px;
#+HTML_HEAD:   cursor: pointer;
#+HTML_HEAD: }
#+HTML_HEAD: .button:hover {
#+HTML_HEAD:   background-color: var(--bg4);
#+HTML_HEAD: }
#+HTML_HEAD: /* Contenedores */
#+HTML_HEAD: .container {
#+HTML_HEAD:   background-color: var(--bg2);
#+HTML_HEAD:   color: var(--base);
#+HTML_HEAD:   padding: 20px;
#+HTML_HEAD:   border-radius: 8px;
#+HTML_HEAD:   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
#+HTML_HEAD: }
#+HTML_HEAD: /* Clases de texto */
#+HTML_HEAD: .text-primary {
#+HTML_HEAD:   color: var(--blue);
#+HTML_HEAD: }
#+HTML_HEAD: .text-secondary {
#+HTML_HEAD:   color: var(--green);
#+HTML_HEAD: }
#+HTML_HEAD: /* Listas */
#+HTML_HEAD: ul, ol {
#+HTML_HEAD:   margin: 0;
#+HTML_HEAD:   padding: 0;
#+HTML_HEAD: }
#+HTML_HEAD: li {
#+HTML_HEAD:   margin-bottom: 5px;
#+HTML_HEAD: }
#+HTML_HEAD: /* Tablas */
#+HTML_HEAD: table {
#+HTML_HEAD:   width: 100%;
#+HTML_HEAD:   border-collapse: collapse;
#+HTML_HEAD:   margin-bottom: 20px;
#+HTML_HEAD: }
#+HTML_HEAD: th, td {
#+HTML_HEAD:   padding: 8px;
#+HTML_HEAD:   border: 1px solid var(--border);
#+HTML_HEAD: }
#+HTML_HEAD: /* Citas */
#+HTML_HEAD: blockquote {
#+HTML_HEAD:   border-left: 4px solid var(--green);
#+HTML_HEAD:   margin-left: 0;
#+HTML_HEAD:   padding-left: 10px;
#+HTML_HEAD:   color: var(--comment);
#+HTML_HEAD: }
#+HTML_HEAD: /* Otros elementos específicos */
#+HTML_HEAD: /* Por ejemplo, si tienes una clase ".card" */
#+HTML_HEAD: .card {
#+HTML_HEAD:   background-color: var(--bg2);
#+HTML_HEAD:   color: var(--base);
#+HTML_HEAD:   border: 1px solid var(--border);
#+HTML_HEAD:   border-radius: 4px;
#+HTML_HEAD:   padding: 15px;
#+HTML_HEAD:   margin-bottom: 20px;
#+HTML_HEAD: }
#+HTML_HEAD: </style>


#+TITLE: How to create a post    .

* Define your router file in your .env

#+begin_src php
ROUTES_PATH=/Users/passh/src/php/reactor/src/ddd/Infrastructure/HttpServer/Router/routes.json

#+end_src

* Arrancamos el cohete.
- Entramos en el directorio del proyecto y ejecutamos
  #+begin_src bash
  nix develop
  #+end_src

  #+begin_quote
  Hay que tener en cuenta que nix debe estar instalado en el sistema , y las experimental features nix-command y flakes deben estar activas .
  #+end_quote

  Una vez dentro  de esta consola dispondremos de la version de php indicada con xdebug , ya que por defecto se arranca con estos módulos en la shell de desarrollo.

* Create a new entry for the new =Controller/HttpRequestHandler=

#+begin_src php
[
  {
    "method": "POST",
    "path": "/post",
    "handler": "\\pascualmg\\reactor\\ddd\\Infrastructure\\HttpServer\\RequestHandler\\CreatePostController"
  }
]
#+end_src php

* Create the =Controller=


Este seria el skel del que partir, no hace nada mas que responder con un 200 que no es poco 😅

#+begin_src php
<?php

namespace pascualmg\reactor\ddd\Infrastructure\HttpServer\RequestHandler;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use React\Http\Message\Response;
use React\Promise\PromiseInterface;

class CreatePostController implements HttpRequestHandler
{

    public function __invoke(ServerRequestInterface $request, ?array $routeParams): ResponseInterface|PromiseInterface //of a response Interface
    {
        return new Response();
    }
}

#+end_src

** Una "larga y necesaria aclaración" antes de seguir.

Todos los Condroladores , deben implementar =HttpRequestHandler= , no ha de verse como una restricción en absoluto, ya que reactPHP no impone aquí ninguna restricción se podria usar una lamda cualquiera, este tipado lo brinda el microFramework 🚀 , En este caso ese tipado es algo que nos brinda una clara visión de lo que puede o no hacer, y debe o no hacer , nuestro controlador.

En esa firma es donde se define, ahora en php8 posibles valores de retorno, esto que podría a priori parecer un smellcode si estamos con el chip funcional en mente,  por que así a simple vista logicamente no es una función pura, pero si lo pensamos bien , sería la manera sintáctica de tener un tipo polimórfico.

#+begin_quote
El comentario al final , indica que hay un lack en el lenguaje de php para representar ese concepto, esto también nos va a pasar en sitios como los respositorios, donde , yo puedo devolver una promise , que se resolverá en un array de post , y como programador lo debo de saber y respetar .

Lo importante es tenerlo claro , que si vas a devolver una promise, aka *deferred* o "en diferido ..." su _resolve_ *TIENE  QUE* devolver una =ResponseInterface= , este , es un punto clave a entender
ya que es como nuestro kernel espera que sea .
#+end_quote

* Vamos a por ese Content

Ahora que ya tenemos el controller devolviendo un 200 , es la hora de ver como obtenemos el payload que nos viene en la request , en este caso va a ser como un JSON , que contendrá los parámetros necesarios para crear nuestra entidad ( y registro en la DDBB )

#+begin_src php
<?php

namespace pascualmg\reactor\ddd\Infrastructure\HttpServer\RequestHandler;

use pascualmg\reactor\ddd\Infrastructure\HttpServer\JsonResponse;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use React\Http\Message\Response;
use React\Promise\PromiseInterface;

class CreatePostController implements HttpRequestHandler
{

    public function __construct(
   //     private readonly PostCreator $postCreator
    )
    {
    }

    public function __invoke(ServerRequestInterface $request, ?array $routeParams): ResponseInterface|PromiseInterface
    {
        $body = $request->getBody()->getContents();
        try {
            $payload = json_decode($body, true, 512, JSON_THROW_ON_ERROR);
        } catch (\JsonException $e) {
            return JsonResponse::withError($e);
        }

        return new Response(
            200,
            ["Content-Type" => "application/json"],
            json_encode($payload)
        );
    }
}

#+end_src

 En la linea 96 ya tenemos la manera de obtener fácilmente el json que nos viene de la request , una vez la obtenemos por el momento simplemente la devolvemos tal cual nos llegue.

#+begin_src bash :results output
curl -X POST --location "http://localhost:8000/post" \
    -H "Content-Type: application/json" \
    -d '{
          "foo": "bar"
        }'

#+end_src

 #+RESULTS:
 : {"foo":"bar"}

 Está funcionando tal como se espera , esto de evaluar código en el .org es _magic_


Lo más ortodoxo sería pues hacer un Command Handler que llame al repo etc, pero por "simplificar"
el desarrollo inicialmente simplemente llamare al save del repo .

1. Añadido el nuevo método a la interfaz de dominio.

 
 #+begin_src


 #+end_src

* PostCreator domain service.
Es momento de implmentar este servicio de dominio, que se encargará de crear usando el =PostRepository=
